# -*- coding: utf-8 -*-
"""Music_Recommendation_System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14gEc7rlOmg7AI7YSOQ9yw8MX0RLIwJr7
"""

# Import necessary libraries
import numpy as np  # For numerical operations
import pandas as pd  # For data manipulation and analysis
import matplotlib.pyplot as plt  # For data visualization
import seaborn as sns  # For enhanced visualization
from sklearn.model_selection import train_test_split  # For splitting data into training and testing sets
from sklearn.linear_model import LinearRegression  # For building a linear regression model
from sklearn.metrics import mean_squared_error  # For evaluating model performance

# Load the dataset from the CSV file
file_path = '/content/sample_data/housing.csv'  # Update this path accordingly
housing_df = pd.read_csv(file_path)

# Display the first few rows of the DataFrame
print(housing_df.head())

# Check for missing values
print(housing_df.isnull().sum())

# Explore dataset statistics
print(housing_df.describe())

# Visualize the relationship between features and target variable using pairplot
sns.pairplot(housing_df)
plt.suptitle("Pairplot of Features", y=1.02)
plt.show()

# Calculate correlation matrix
correlation_matrix = housing_df.corr()

# Visualize correlation matrix as heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)
plt.title("Correlation Matrix Heatmap")
plt.show()

# Select features highly correlated with the target variable
high_corr_features = correlation_matrix['PRICE'][abs(correlation_matrix['PRICE']) > 0.5].index.tolist()
print("Highly correlated features with 'PRICE':", high_corr_features)

# Visualize the relationship between highly correlated features and target variable
fig, axs = plt.subplots(len(high_corr_features), 1, figsize=(8, 6*len(high_corr_features)))
for i, feature in enumerate(high_corr_features):
    axs[i].scatter(housing_df[feature], housing_df['PRICE'])
    axs[i].set_xlabel(feature)
    axs[i].set_ylabel('PRICE')
    axs[i].set_title(f'Relationship between {feature} and PRICE')
plt.tight_layout()
plt.show()

# Split the dataset into train and test sets
X = housing_df.drop('PRICE', axis=1)
y = housing_df['PRICE']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions
y_pred_train = model.predict(X_train)
y_pred_test = model.predict(X_test)

# Evaluate the model
train_rmse = np.sqrt(mean_squared_error(y_train, y_pred_train))
test_rmse = np.sqrt(mean_squared_error(y_test, y_pred_test))
print("Train RMSE:", train_rmse)
print("Test RMSE:", test_rmse)